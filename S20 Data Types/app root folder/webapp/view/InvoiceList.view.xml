<mvc:View
controllerName="ui5.walkthrough.controller.InvoiceList"
   xmlns="sap.m"
   xmlns:mvc="sap.ui.core.mvc">
   <List
      headerText="{i18n>invoiceListTitle}"
      class="sapUiResponsiveMargin"
      width="auto"
      items="{invoice>/Invoices}" >
      <items>
         <ObjectListItem

            title="{invoice>Quantity} x {invoice>ProductName}"

            number="{
                    parts: [
                        'invoice>ExtendedPrice',
                        'view>/currency'
                    ],
                    type: 'sap.ui.model.type.Currency',
                    formatOptions: {
                        showMeasure: false
                    }
                }"
                numberUnit="{view>/currency}"/>
      </items>
   </List>
</mvc:View>

<!-- Se asigna controlador de la vista invoice: -->
<!-- controllerName="ui5.walkthrough.controller.InvoiceList" -->

<!-- Agregamos un precio a nuestra lista de facturas en la vista agregando los atributos número y 
numberUnit al control ObjectListItem, luego aplicamos el tipo de datos de moneda 
en el número configurando el atributo de tipo de la sintaxis de enlace en sap.ui.model.type .Divisa. -->

<!-- Como puede ver arriba, estamos utilizando una sintaxis de enlace especial para la propiedad numérica
de ObjectListItem. Esta sintaxis de vinculación utiliza los llamados "campos calculados",
que permiten vincular múltiples propiedades de diferentes modelos a una única propiedad de un control.
Las propiedades vinculadas a diferentes modelos se denominan "partes". 
En el ejemplo anterior, la propiedad del control es número y las propiedades vinculadas (“partes”) 
recuperadas de dos modelos diferentes son invoice>ExtendedPrice and view>/currency. -->

<!-- Queremos mostrar el precio en euros y, normalmente, la moneda forma parte de nuestro modelo de datos
en el back-end. En nuestro caso este no es el caso, por lo que debemos definirlo directamente 
en la aplicación. Por lo tanto, agregamos un controlador para la lista de facturas y 
utilizamos la propiedad de moneda como segunda parte de nuestra sintaxis vinculante. 
El tipo de moneda manejará el formato del precio por nosotros, según el código de moneda. 
En nuestro caso, el precio se muestra con 2 decimales. -->

<!-- Queremos mostrar el precio en euros y, normalmente, la moneda forma parte de nuestro 
modelo de datos en el back-end. 
En nuestro caso este no es el caso, por lo que debemos definirlo directamente en la aplicación. 
Por lo tanto, agregamos un controlador para la lista de facturas y 
utilizamos la propiedad de moneda como segunda parte de nuestra sintaxis vinculante. 
El tipo de moneda manejará el formato del precio por nosotros, según el código de moneda. 
En nuestro caso, el precio se muestra con 2 decimales. -->

<!-- Además, configuramos la opción de formato showMeasure en falso. 
Esto oculta el código de moneda en el número de propiedad, 
porque se pasa al control ObjectListItem como una propiedad separada numberUnit. -->